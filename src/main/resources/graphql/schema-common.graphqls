"""
DateTime scalar must use ISO 8601 timestamp format with optional timezone

i.e. 2020-12-08T10:33:45+00:00 OR 2020-12-08T10:33:45Z
"""
scalar DateTime

"Date scalar must use ISO 8601. i.e. 2020-12-08"
scalar Date

"Prismatic power prescribed to compensate for eye alignment"
type Prism {
    "Prism diopters and direction for horizontal alignment. e.g 1.50 Out or 2.00 In"
    horizontal: String

    "Prism diopters and direction for vertical alignment. e.g 1.50 Down or 1.00 Up"
    vertical: String
}

"Naked eye visual acuity"
type UnaidedVA {
    rightEye: String
    leftEye: String
    binocular: String
}

"Prescribed assisted eye measurements"
type EyeRX {
  """
  The lens power measured in diopters. e.g. +1.50
  Use a `-` sign for short-sighted and `+` sign for long-sighted
  """
  sphere: String

  "The amount of correction for astigmatism. Matches the same sign as sphere. e.g. +1.25"
  cylinder: String

  "The axis for astigmatism correction. An int between 0 and 180"
  axis: Float

  "The measure of the ability of the eye to distinguish shapes and the details of objects at distance. e.g. 20/20"
  distanceVisualAcuity: String

  "The measure of the ability of the eye to distinguish shapes and the details of objects at close range. e.g. 6/6"
  nearVisualAcuity: String

  "The measure of the ability of the eye to distinguish shapes and the details of objects"
  visualAcuity: String

  "PD: The distance between the pupils"
  pupillaryDistance: Float

  nearAddition: Float

  interAddition: Float

  "ADD Addition"
  addition: Float

  "Prismatic power prescribed to compensate for eye alignment on distance vision"
  distancePrism: Prism

  "Prismatic power prescribed to compensate for eye alignment on near vision"
  nearPrism: Prism

  "General prismatic power"
  prism: Prism
}

"A RX prescribed by an optometrist after a sight test."
type PrescribedRx  {
  "The id of the prescription"
  id: ID!

  "The clinician who wrote the prescription"
  clinicianName: String

  "The Test Room (TR) number for the appointment"
  testRoomNumber: Int

  "The RX for the right eye"
  rightEye: EyeRX

  "The RX for the left eye"
  leftEye: EyeRX

  "BIN Vision: The binocular visual acuity of the patient. e.g. 20/20"
  distanceBinVisualAcuity: String

  "Naked eye visual acuity"
  unaidedVisualAcuity: UnaidedVA

  "Back Vertex Distance - What distance the lenses should sit from the eyes. e.g. 8.00"
  bvd: Float

  "Recall Period. e.g 12 or 24"
  recallPeriod: Int

  "Test Date. e.g 2021-05-25"
  testDate: DateTime

  dispenseNotes: String

  recommendations: String
}


type SpecificAddition {
    rightEye: Float
    leftEye: Float
    reason: String
}

"Current glasses(specs) visual acuity"
type CurrentSpecsVA {
    rightEye: String
    leftEye: String
}


type RefractedRx  {
  "BIN Vision: The binocular visual acuity of the patient. e.g. 20/20"
  distanceBinVisualAcuity: String

  "Naked eye visual acuity"
  unaidedVisualAcuity: UnaidedVA

  "Back Vertex Distance - What distance the lenses should sit from the eyes. e.g. 8.00"
  bvd: Float

  specificAddition: SpecificAddition

  currentSpecsVA: CurrentSpecsVA

  "The RX for the right eye"
  rightEye: EyeRX

  "The RX for the left eye"
  leftEye: EyeRX

  notes: RxNotes
}

enum SightTestType {
  MY_SIGHT_TEST,
  SIGHT_TEST
}

type SightTest {
  id: ID!
  trNumber: Int
  type: SightTestType
  creationDate: Date
  prescribedRx: PrescribedRx
  refractedRx: RefractedRx
  historyAndSymptoms: HistoryAndSymptoms!
}

type HistoryAndSymptoms {
  reasonForVisit: String
  generalHealth: String
  medication: String
  ocularHistory: String
  familyHistory: String
  lifestyle: Lifestyle!
}

type Lifestyle {
  driveHeavyGoods: Boolean
  drivePrivate: Boolean
  drivePublic: Boolean
  driveMotorcycle: Boolean
  vdu: Boolean
  vduHoursPerDay: Int
  occupation: String
  hobbies: String
}

type HabitualRx {
  "The id of the pair"
  id: ID!

  "The sight test ID"
  sightTestId: ID!

  "The pair number 1-3"
  pairNumber: Int!

  "Age of the pair in years"
  age: Float

  "The clinician who wrote the rx"
  clinicianName: String

  "Left Eye rx"
  leftEye: EyeRX

  "Right Eye rx"
  rightEye: EyeRX

  "Notes"
  notes: String
}

"RxNotes will be used on RefrectedRx and PrescribedRx"
type RxNotes {
  text: String
  optomName: String
  date:Date
}

type Query {
  "Returns a prescribedRX from legacy DB, searching by id OR testRoomNumber"
  prescribedRX(id: ID, testRoomNumber: Int): PrescribedRx

  "Returns a sight test by ID"
  sightTest(id: ID!): SightTest!

  sightTests(customerID: ID!): [SightTest]
}

type Mutation {
  """
  Creates and return a new Sight Test record on the main DB
  """
  createSightTest(trNumber: Int!, type: SightTestType!): SightTest!

  """
  Creates and return a new habitual rx pair
  """
  createHabitualRx(sightTestId: ID!, pairNumber: Int!, pair: HabitualRxInput!): HabitualRx!

  """
  Updates and returns an existing habitual rx pair
  """
  updateHabitualRx(id: ID!, pair: HabitualRxInput!): HabitualRx!

  """
  Updates the history and symptoms on a sight test
  """
  updateHistoryAndSymptoms(sightTestId: ID!, input: HistoryAndSymptomsInput!): HistoryAndSymptoms!

  """
  Updates the refractedRx fields on a sight test
  """
  updateRefractedRx(sightTestId: ID!, input: RefractedRxInput!): RefractedRx!

  """
  Updates the refractedRx fields on a sight test
  """
  updateRefractedRxNote(sightTestId: ID!, text: String): RxNotes
}
