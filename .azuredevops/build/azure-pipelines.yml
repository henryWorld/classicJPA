---
trigger:
  batch: true
  paths:
    exclude:
    - .azuredevops/*
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
- template: ../vars/common.yml
- name: sonarQubeServiceConnection
  value: 'Specsavers IT - SonarQube - Prod'

resources:
  repositories:
    - repository: templates
      type: git
      name: DevOpsEngineering/azure-pipeline_templates
      ref: refs/tags/10.1.3

jobs:
  - template: 'jobs/versioning/conventional-commit.yml@templates'
  - template: "jobs/maven/maven-ci.yml@templates"
    parameters:
      jobName: mavenBuild
      dependsOn: [ GitVersion]
      sonarServiceConnection: $(sonarQubeServiceConnection)
      buildGoals: test
      runComponentTest: false
      componentGoals: verify
      artifactVersion: $[dependencies.GitVersion.outputs['setVersion.semVer']]
      authenticationFeeds:
        - ${{ variables.artifactFeed }}
      publishToFeed: true
      gitTag: true
      logToDeliveryDb: false
      customPreSteps: []
      customPostSteps:
        - script: |
            mkdir -p $(build.artifactStagingDirectory)/$(buildMetadataName)
            echo $(jq -n --arg version "$(version)" '{version: $version}') > $(build.artifactStagingDirectory)/$(buildMetadataName)/metadata.json
          condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release'),startsWith(variables['Build.SourceBranch'], 'refs/heads/feat')), notIn(variables['Build.Reason'], 'PullRequest'))
          displayName: Create Build Metadata
        - publish: $(Build.ArtifactStagingDirectory)/$(buildMetadataName)
          artifact: $(buildMetadataName)
          condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release'),startsWith(variables['Build.SourceBranch'], 'refs/heads/feat')), notIn(variables['Build.Reason'], 'PullRequest'))
        - script: |
            mv ./target/*.jar $(Build.ArtifactStagingDirectory)
            ls -la $(Build.ArtifactStagingDirectory)
          displayName: Stage Jar Files
        - publish: $(Build.ArtifactStagingDirectory)
          artifact: ${{ variables.buildArtifactName }} 